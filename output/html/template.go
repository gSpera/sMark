// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x61\x6f\xb3\x36\x10\xfe\x9e\x5f\x71\xa3\x1f\xba\x55\xc3\x24\x69\x2b\x6d\x84\x64\x52\xbb\x55\xed\x34\xa9\xd2\xd2\xfd\x00\x83\x0d\x38\x35\x36\xb3\x2f\x5a\x32\xc4\x7f\x7f\x05\x4e\x48\x20\xbc\x7d\x2b\xbd\xfe\x78\xcf\xf3\xdc\x1d\xc7\xf9\x71\x94\x63\x21\x57\x93\x49\x94\x73\xca\x56\x13\x00\x80\x08\x05\x4a\xbe\xaa\x2a\xf2\x5a\xa2\xd0\xca\x92\x35\x1a\xa1\x32\xf2\xd6\xc4\xeb\x3a\x0a\x1c\xc1\x91\x0b\x8e\x14\x92\x9c\x1a\xcb\x71\xe9\xfd\xf3\xf6\xe4\xff\xe2\xad\xa2\xa0\x09\x3b\x46\x55\x81\x48\xa1\xcb\xf5\xa0\xb5\x24\x7f\x28\x1a\x4b\xfe\xa4\x15\x42\x5d\x47\x52\xa8\x77\xc8\x0d\x4f\x97\x5e\x8e\x58\xda\x30\x08\x52\xad\xd0\x92\x4c\xeb\x4c\x72\x5a\x0a\x4b\x12\x5d\x04\x89\xb5\xbf\xa5\xb4\x10\x72\xbf\xfc\x5b\xc7\x1a\xb5\x07\x86\xcb\xa5\x67\x71\x2f\xb9\xcd\x39\x47\x6f\x55\x55\xc0\x15\x83\xba\x76\xdd\xb5\x90\xeb\xa3\x39\x25\xa1\x52\x64\xca\x97\x3c\x45\xa8\xba\x70\x73\x90\xef\xd0\x6f\xd1\x10\x1a\x78\xd1\xa1\xf5\xe4\x42\x9f\x70\x85\xdc\x7c\x90\xc1\x11\x3e\xcc\x61\x44\x96\x7f\xd4\x44\x8b\x8f\x67\x30\x1c\x12\xcd\x78\x5f\x1b\xd3\xe4\x3d\x33\x7a\xab\x98\x9f\x68\xa9\x4d\x08\x57\xbf\xb7\x67\xd1\xa3\x31\x61\x4b\x49\xf7\x21\xc4\x52\x27\xef\x7d\xac\xa4\x8c\x09\x95\x85\x30\x25\xf7\x86\x17\xa3\xa0\xeb\x3b\x84\xd9\x05\xe1\x3f\xc1\x30\x0f\x21\x15\xe8\x27\x5a\x21\x57\xe3\xdd\x57\x55\x70\xd3\xd3\x05\x41\xbb\x58\x36\x1c\x44\x9f\x67\x21\xbc\x28\xc6\x15\x42\x4b\x18\xc2\xb7\x1d\xbc\xde\xc6\x38\xc6\x98\x87\xe3\xca\xbb\xf0\x52\x72\x13\x1c\x76\xa6\x39\xf9\x0c\xaa\x66\x05\x7d\x2b\xfe\xe7\x21\xdc\xba\x71\x8c\xfd\xe1\x33\xcd\xbc\xa7\x99\x3b\xcd\x19\x7e\xdb\xc3\x67\x9f\xca\x79\xd7\xd7\xb8\x8c\x1d\xdc\xfe\xc2\x7f\xb7\x1a\xf9\x60\x8f\x62\x6d\x18\x37\xed\x9a\x87\x70\x57\xee\xc0\x6a\x29\x18\x5c\x4d\xdb\x33\xfe\x5f\x1d\x79\x36\x2d\x77\x7d\xbc\xa0\x26\x13\x2a\x84\xfb\x71\xc0\x47\x5d\x7e\x5d\xe6\xc7\x1a\x51\x17\x43\xc2\xe9\x0b\x4f\xf3\x1f\x7c\x42\xfb\xd9\xee\xb6\x87\x70\xed\xee\xfb\xf5\xcf\x60\xa9\xb2\xbe\xe5\x46\xa4\x8b\x4b\xfa\x71\xb2\xd3\xfe\xf6\xd6\x67\xbb\x07\x43\x53\x7b\x51\x52\x28\xfe\xb8\x5e\x37\x9e\xe1\x4c\x23\x38\x73\x8d\x81\x7b\x1d\x44\x8f\x5b\x8b\xba\x38\x88\x8e\xc9\x9d\x8f\x0d\x1d\xe9\x60\x6c\x97\x6e\xda\xe5\xa8\x6b\xaf\xab\x75\xf0\xae\x6f\x18\xe7\x9f\xfd\xba\x3f\xf8\xfe\xa3\x66\x1c\x9e\x45\x96\xcb\xe6\x76\xfa\xfe\xea\x73\x5d\x1d\xed\x36\x61\x6a\x63\x49\x22\xf5\x96\xa5\x92\x1a\xde\xda\x2d\xdd\xd0\x5d\x20\x45\x6c\x83\xfc\x98\x98\x6c\x6c\xf0\x2b\x99\xcd\xc9\xd4\xcd\xc8\x06\x8c\xa7\x74\x2b\x91\x14\x42\x91\xc4\x5a\xef\xac\xb0\x4d\x8c\x28\x11\xac\x49\xbe\xab\xd0\x29\xd6\xd4\xd8\xd8\xe6\x75\x71\xa9\x2f\x6a\xad\x72\xb9\xb1\x44\x28\x81\xdd\x28\x84\xca\x5e\xd5\x5f\x9a\xb2\x1f\x7f\x5a\xf4\x75\xa7\x69\x47\x81\x7b\xfc\x26\x51\xac\xd9\xfe\x88\x92\x07\xcd\xf6\x2d\xea\xa2\x0d\xad\x79\x2b\xbf\x04\x00\x00\xff\xff\x10\xb1\xe8\x59\x32\x07\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1842, mode: os.FileMode(420), modTime: time.Unix(1532810943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

