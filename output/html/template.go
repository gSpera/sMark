// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package htmlout

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\x9b\x4c\x10\x3e\xc3\xaf\x18\xf1\x1e\x22\x59\x01\xe2\x38\x91\x5e\x11\xec\x4a\x89\x1a\x25\x3d\xd6\xe9\xb9\x5a\x60\x0c\xab\x2c\xbb\x74\x77\x52\xc5\x45\xfc\xf7\x6a\x59\x42\x0c\x71\xac\xee\x09\xe6\xf9\x18\xc4\xcc\x3e\x69\x45\xb5\xd8\xf8\x7e\x5a\x21\x2b\x36\x3e\x00\x40\x4a\x9c\x04\x6e\xda\x36\xda\x92\xe6\xb2\x8c\x9e\xec\x7b\xd7\xa5\xb1\x03\x1c\xa9\x46\x62\x90\x57\x4c\x1b\xa4\x75\xf0\xe3\xe9\x3e\xfc\x3f\xd8\xa4\xb1\x2d\x3b\x46\xdb\x02\xdf\x41\x74\xab\x94\x88\xbe\x4a\x96\x09\xbc\x57\x92\xa0\xeb\x52\xc1\xe5\x33\x54\x1a\x77\xeb\xa0\x22\x6a\x4c\x12\xc7\x3b\x25\xc9\x44\xa5\x52\xa5\x40\xd6\x70\x13\xe5\xaa\x8e\x73\x63\xbe\xec\x58\xcd\xc5\x7e\xfd\x5d\x65\x8a\x54\x00\x1a\xc5\x3a\x30\xb4\x17\x68\x2a\x44\x0a\x36\x6d\x0b\x28\x0b\xe8\x3a\xf7\x55\x3d\xe4\xfa\xdb\xb3\x80\x76\x7c\xb6\xc7\xb6\x09\x9d\x65\x02\x67\xce\xf4\xec\x1c\x0c\x93\x26\x34\xa8\xf9\xee\xe6\x23\xdd\xf0\x3f\x98\xc0\x32\xba\xb8\xd6\x58\xbf\xe3\x9d\x3f\x3e\x36\x11\x13\xbc\x94\xa1\xc0\x1d\xcd\x1a\x12\xbe\x52\xd8\xa3\x09\x58\xf8\xa4\x3e\x47\x49\xa8\x4f\x38\x38\xc2\x49\x0f\xcd\xcb\xea\xd4\x47\xf4\xf8\x51\x87\xb6\x8d\x17\x13\x59\x1c\xf7\x83\x37\xc9\xac\xfa\xb0\x4c\xe0\x51\x16\x28\x09\x7a\xc2\x1c\x5e\x8d\xf0\xf6\x25\xa3\x63\x8c\xcb\xe4\xb8\xf2\x2a\xf9\x28\x59\xc4\xc3\x6c\xed\xa9\x96\xd0\x1e\x0c\x65\x15\xf5\x33\x39\xf6\x8f\x0e\x34\x97\x13\xcd\xa5\xd3\x1c\xe0\xab\x09\xbe\xfc\x27\xcf\xab\xa9\xc6\x39\x8e\x70\x26\x54\xfe\xfc\xeb\x45\x11\xce\x26\x91\x29\x5d\xa0\xee\x17\x25\x81\xab\xe6\x15\x8c\x12\xbc\x80\xff\x2e\xfa\x33\x5d\xbe\x86\x15\x05\x97\xe5\x40\x5e\x5e\x34\xaf\x53\xbc\x66\xba\xe4\x32\x81\xeb\xe3\x40\x48\xaa\xf9\x5c\x16\x66\x8a\x48\xd5\x73\x42\xe7\x7b\x5e\xa3\x31\xaa\x44\x98\x57\x5a\xd5\x0c\x16\xe7\x50\xf0\xdf\x87\x05\x68\x7d\xcf\xf3\x26\x37\xa9\x56\x52\x99\x86\xe5\x78\x33\x42\xc3\x8f\x59\x59\x77\xcf\xf3\x04\x97\x18\x56\x68\x97\x2f\x81\xe5\xb5\xab\x4e\x96\x0f\xde\xd2\xe6\x51\x5a\xf2\xdd\x76\x3b\x5e\xea\xf8\xe0\x56\x0f\xa9\x32\x70\xef\x5e\x0c\xa9\xfa\x80\xdb\xf3\xfb\x7c\x99\x27\xc5\x10\x38\xef\xa9\x36\x6a\xbb\x2e\x18\xbd\x87\x2c\xf9\x24\xc0\xbe\x8d\x7d\xa6\xb1\xf3\x6e\xfa\xf3\x01\x59\xd1\x75\x7e\x1a\xbb\x3c\xf5\xd3\x4c\x15\xfb\x37\xfb\xe8\x56\x15\xfb\x1e\x75\x55\x4b\xb3\xf1\xfb\x37\x00\x00\xff\xff\x22\x89\x42\xd5\x85\x05\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1413, mode: os.FileMode(420), modTime: time.Unix(1533822031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

