// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package htmlout

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\x9b\x3c\x14\xbe\x86\x5f\x71\xde\xbc\x17\x95\xa2\x02\x4d\xd3\x4a\x13\x25\x99\xd4\xae\x55\x3b\x6d\xda\xb4\x64\x17\xbb\x9a\x0c\x1c\xc0\xaa\xb1\x99\x7d\x3a\x35\x43\xfc\xf7\x09\x4c\x49\x48\xd3\x68\xbe\x09\x39\xcf\xc7\x31\x1c\xfb\x89\xfe\xfb\xf0\xe5\x66\xfd\xe3\xeb\x2d\x14\x54\x8a\xa5\x1b\xd9\x1f\x37\x2a\x90\xa5\x4b\x17\x00\x20\x22\x4e\x02\x97\x75\xed\xaf\x48\x73\x99\xfb\xeb\xf6\x7f\xd3\x44\x81\x05\x2c\xa9\x44\x62\x90\x14\x4c\x1b\xa4\xc5\xe4\xfb\xfa\xce\x7b\x37\xb1\x50\x5d\x03\xcf\xc0\xbf\x56\x4a\xf8\xb7\x92\xc5\x02\xef\x94\x24\x68\x9a\x48\x70\xf9\x08\x85\xc6\x6c\x31\x29\x88\x2a\x13\x06\x41\xa6\x24\x19\x3f\x57\x2a\x17\xc8\x2a\x6e\xfc\x44\x95\x41\x62\xcc\xfb\x8c\x95\x5c\x6c\x16\xdf\x54\xac\x48\x4d\x40\xa3\x58\x4c\x0c\x6d\x04\x9a\x02\x91\x26\xcb\xba\x06\x94\x29\x34\x8d\xdd\x4e\x07\xd9\xfe\xed\x9a\x42\x3d\x3c\xb7\xab\x6d\xe3\x59\xcb\x10\x4e\xac\xe9\xc9\x29\x18\x26\x8d\x67\x50\xf3\xec\xea\x35\xdd\xf0\x3f\x18\xc2\xcc\x3f\xbb\xd4\x58\x6e\xf1\xc6\x1d\x1e\x2b\x9f\x09\x9e\x4b\x4f\x60\x46\x7b\x0d\x09\x9f\xc9\xeb\xd0\x10\x5a\xf8\xa8\x3e\x41\x49\xa8\x8f\x38\x58\xc2\x51\x0f\xcd\xf3\xe2\xd8\x26\x3a\xfc\xa0\x43\x5d\x07\xd3\x91\x2c\x08\xba\x89\x9b\x70\xaf\x7a\x3f\x0b\xe1\x41\xa6\x28\x09\x3a\xc2\x3e\x3c\x1f\xe0\xd5\x53\x4c\x87\x18\xe7\xe1\x61\xe5\x45\xf8\x5a\x32\x0d\xfa\xd9\xb6\xab\x98\x41\xbd\x33\x94\xb9\xdf\xcd\xe4\xd0\x37\xda\xd1\x9c\x8f\x34\xe7\x56\xb3\x83\xcf\x47\xf8\xec\x9f\x3c\x2f\xc6\x1a\xeb\x38\xc0\xb1\x50\xc9\xe3\xaf\x27\x45\xb8\x37\x89\x58\xe9\x14\x75\x77\x50\x42\xb8\xa8\x9e\xc1\x28\xc1\x53\xf8\xff\xac\x5b\xe3\xc3\x57\xb1\x34\xe5\x32\xef\xc9\xb3\xb3\xea\x79\x8c\x97\x4c\xe7\x5c\x86\x70\x79\x18\xf0\x48\x55\x6f\xcb\xbc\x58\x11\xa9\x72\x9f\xd0\xb8\x8e\x53\x69\xf4\x0b\xe1\x25\x85\x56\x25\x83\xe9\x29\xa4\xfc\xf7\x6e\x01\x6a\xd7\x71\x9c\xd1\x4d\x2a\x95\x54\xa6\x62\x09\x5e\x0d\x50\xff\x61\xe6\xad\xbb\xe3\x38\x82\x4b\xf4\x0a\x6c\x0f\x5f\x08\xb3\x4b\x5b\x1d\x1d\x3e\xc3\x32\xbc\x59\xad\xe0\x25\x6d\x1e\x64\xab\x69\x2b\x2f\x77\x3b\xd8\xb9\xdc\x7d\xb8\xf4\xdc\x9b\x27\x43\xaa\xdc\xe1\x76\xfc\x2e\x66\xf6\x03\xa3\xcf\x9d\x6d\xaa\x0d\xda\xa6\xd9\x06\x57\x1f\x29\x6f\xe4\xd8\xc7\xa1\xcf\x38\x7d\xec\x4b\xdc\xaf\x3f\x7f\x1a\x76\xf6\xf3\x1e\x59\xda\x34\x6e\x14\xd8\x60\x75\xa3\x58\xa5\x9b\x97\x3e\xfe\xb5\x4a\x37\x1d\x6a\xab\x2d\xad\xcd\xe1\xbf\x01\x00\x00\xff\xff\x40\x29\x07\xa1\x9e\x05\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1438, mode: os.FileMode(420), modTime: time.Unix(1534356848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

