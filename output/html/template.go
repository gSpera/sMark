// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\x06\x5f\x16\x42\x63\x35\xc9\xf6\xa2\x38\x29\x74\x69\xe9\x9e\x0a\x4d\x5f\xc0\x89\xc7\xb1\xa8\x2c\x05\x6b\x16\x9a\x0a\xbd\x7b\x91\xb4\x76\x6c\xc7\x84\xfa\x64\xe6\xfb\x61\x18\x7d\x5f\x5e\x53\x23\xf7\x49\x92\xd7\x58\x94\xfb\x04\x00\x20\x27\x41\x12\xf7\xd6\x66\x3f\x2e\x24\xb4\x32\xd9\x2f\x3f\x70\x2e\x67\x11\x49\x02\xcd\x5a\x10\x15\xf4\x9c\xaf\xaa\x38\x4a\xfc\xa6\x15\x81\x73\xb9\x14\xea\x37\xd4\x2d\x56\xbb\xb4\x26\xba\x18\xce\x58\xa5\x15\x99\xec\xac\xf5\x59\x62\x71\x11\x26\x3b\xe9\x86\x9d\x8c\xf9\x5c\x15\x8d\x90\xd7\xdd\x4f\x7d\xd4\xa4\x53\x68\x51\xee\x52\x43\x57\x89\xa6\x46\xa4\x74\x6f\x2d\xa0\x2a\xc1\xb9\xb8\x5d\x80\xe2\xa6\xfe\xbb\x64\x85\x14\x67\xb5\x94\x58\x11\xd8\x7e\xec\x3f\xc2\x3f\xb4\x0c\x28\x07\x0f\x6f\x7b\xd4\x25\x77\xfa\x13\x2a\xc2\xf6\x81\x43\x24\x3c\xf4\x68\xc5\xb9\x7e\xb4\x44\xc0\x87\x0e\xdd\x9f\xb5\x6c\x31\x52\x31\x16\x6e\x6e\xf8\x64\xfa\x7d\xc5\xe1\x55\x95\xa8\x08\x02\x61\x0a\x6f\x7a\xf8\xf0\x76\xa4\x39\xc6\x9a\xcf\x2b\x9f\xf9\xbd\x64\xc1\xdc\x6d\xc7\x7a\x05\xd6\xbf\xe1\xd2\x88\xbf\xc8\x61\x93\x7d\x6a\xb1\xd9\xce\x9d\x68\xa0\x59\x8f\x34\xeb\xa8\x19\xe0\x9b\x11\xbe\xfa\x2f\xcf\xe7\xb1\x66\xec\xb8\x98\x9c\x3f\x30\x63\xc2\x38\x3c\xc5\x8c\x3d\x7d\x00\x53\x28\xb3\x34\xd8\x8a\x6a\x7b\x4f\xef\x96\xf9\x18\xb6\x99\x7d\xae\x5b\xee\x5f\x95\x14\x0a\x5f\x0e\x07\x1f\xd0\x98\x50\x36\x88\xa8\xb5\xc3\x92\xbc\xbc\x19\xd2\xcd\x3b\xb9\x73\x8b\x65\x99\xc6\xfe\xbd\x3d\x83\x16\xf6\x62\xe7\xd2\xce\xbc\x6b\x46\xce\x62\x7f\x93\xfc\xa8\xcb\x6b\x87\x66\x5f\x74\x79\x0d\x68\x9c\x7a\x9a\xaf\xfb\xbf\x00\x00\x00\xff\xff\x9f\xe6\xc1\x16\xf5\x03\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1013, mode: os.FileMode(420), modTime: time.Unix(1526314306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

