// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\x06\x5f\x16\x42\x2d\x35\xc9\x16\x8a\xe3\xb8\xb0\x4b\x97\xee\xa9\xd0\x6c\x1f\xc0\x89\xc7\xb6\xa8\x2c\x05\x6b\x16\x9a\x0a\xbd\x7b\x91\x95\xb8\xb6\x13\x42\x7d\x32\xf3\xfd\xf0\x21\xcd\xa7\xac\xa1\x56\xe6\x51\x94\x35\x58\x94\x79\x04\x00\x90\x91\x20\x89\xb9\xb5\xec\xfb\x91\x84\x56\x86\xed\xa8\x13\xaa\x66\x6f\x7e\xee\x5c\xc6\x03\x21\x90\x5b\xa4\x02\x0e\x4d\xd1\x19\xa4\x6d\xfc\xf3\xed\x25\xf9\x1c\xe7\x19\xf7\xe3\xc0\xb0\x16\x44\x05\x83\xd7\x93\xd6\x92\x7d\x55\xc5\x5e\xe2\x8b\x56\x04\xce\x65\x52\xa8\x5f\xd0\x74\x58\x6d\xe3\x86\xe8\x68\x52\xce\x2b\xad\xc8\xb0\x5a\xeb\x5a\x62\x71\x14\x86\x1d\x74\xcb\x0f\xc6\x7c\xa9\x8a\x56\xc8\xd3\xf6\x87\xde\x6b\xd2\x31\x74\x28\xb7\xb1\xa1\x93\x44\xd3\x20\x52\x9c\x5b\x0b\xa8\x4a\x70\x2e\xa4\xeb\xa1\x90\xc3\x7f\x47\x56\x48\x51\xab\x44\x62\x45\x60\x87\xb1\xff\x08\x7f\x53\xd2\xa3\x29\x78\x78\x33\xa0\x2e\xba\xd2\x1f\x50\x11\x76\x77\x1c\x02\xe1\xae\x47\x27\xea\xe6\x5e\x88\x1e\x1f\x3b\x5c\xfe\xac\xe5\x8b\x89\x8a\xf3\xfe\x66\x4c\x3a\x9b\x7e\x5b\xa6\xf0\xaa\x4a\x54\x04\x3d\x61\x0e\xaf\x07\x78\xf7\xbe\xa7\x5b\x8c\x55\x7a\x5b\xf9\x98\x5e\x4b\x16\xdc\xfd\xcb\xd8\x2c\xc1\xfa\x3b\x4c\x8c\xf8\x83\x29\xac\xd9\xa7\x0e\xdb\xcd\xad\x23\x1a\x69\x56\x13\xcd\x2a\x68\x46\xf8\x7a\x82\x2f\xff\xcb\xf3\x71\xaa\x99\x3a\x2e\x66\xc7\xdf\x33\xc3\x86\xa5\xf0\x10\x76\xec\xe1\x03\x98\x42\x99\xc4\x60\x27\xaa\xcd\x35\xfd\x12\xe6\x63\x9f\xe6\xe6\x75\xc1\xbc\x48\xaf\x4a\x0a\x85\xcf\xbb\x9d\xdf\xd3\xb0\xa8\x7c\xb4\xa9\xd6\x8e\x0b\x73\xd6\x3c\xbf\x1b\xd2\xed\x59\x73\xf1\x0e\xd5\x99\x97\xe0\xdc\xa5\xeb\x02\x0f\x1e\xce\xc5\x43\x39\xcf\x75\xc9\x78\x78\x01\xa2\x6c\xaf\xcb\xd3\x05\x65\x4f\xba\x3c\xf5\x68\x98\x7a\x9a\x7f\x30\xfe\x06\x00\x00\xff\xff\x8f\x7f\x2f\x86\x37\x04\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1079, mode: os.FileMode(420), modTime: time.Unix(1531861890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

