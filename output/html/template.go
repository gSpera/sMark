// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6a\xe3\x30\x10\xbe\xfb\x29\x06\x5f\x02\xcb\xda\xde\xc0\x2e\x2c\x8e\xe2\x42\x43\x0b\x3d\x15\x9a\xbe\x80\x13\x8f\x2d\x51\x59\x32\xd6\x14\xe2\x0a\xbd\x7b\x91\x15\xbb\x26\x4d\xe3\x93\x99\xef\x47\xc3\x7c\x1f\xe3\xd4\xca\x22\x8a\x18\xc7\xb2\x2a\x22\x00\x00\x46\x82\x24\x16\xd6\xa6\xcf\x1d\x09\xad\x4c\xfa\xea\x07\xce\xb1\x2c\x20\xd1\x48\xb3\x16\x44\x0d\x33\xe7\x41\x95\x07\x89\x8f\x5a\x11\x38\xc7\xa4\x50\x6f\xc0\x7b\xac\xb7\x31\x27\xea\x4c\x9e\x65\xb5\x56\x64\xd2\x46\xeb\x46\x62\xd9\x09\x93\x1e\x75\x9b\x1d\x8d\xb9\xab\xcb\x56\xc8\x61\xfb\xa2\x0f\x9a\x74\x0c\x3d\xca\x6d\x6c\x68\x90\x68\x38\x22\xc5\x85\xb5\x80\xaa\x02\xe7\xc2\x76\x23\x14\x36\xf5\x5f\x97\x96\x52\x34\x2a\x91\x58\x13\xd8\x79\xec\x3f\xc2\x13\x25\x23\x9a\x83\x87\x37\x33\xea\xa2\x6f\xfa\x23\x2a\xc2\xfe\x86\x43\x20\xdc\xf4\xe8\x45\xc3\x6f\x2d\x31\xe2\x4b\x87\xe9\x8f\xaf\x2f\x54\xfe\x58\x89\x11\x1f\x98\xc3\xdf\xff\xdd\xe9\x9a\xe6\xd7\x35\x49\xb8\x65\x0e\xab\x70\xcd\xd5\x6f\x30\xa5\x32\x89\xc1\x5e\xd4\x9b\x9f\x5e\x58\xa7\x7f\xfe\xf5\xd8\x5e\x7b\xc4\xda\xaf\x84\x9f\x94\x14\x0a\x77\xfb\xbd\x8f\x22\x64\x91\x2d\xc2\xb0\x76\x59\x87\xdd\xbb\x21\xdd\x9e\xc9\x93\x5b\xa8\xc5\x65\xc0\xe7\x9e\x2c\xfa\x36\x8b\x9d\x8b\x27\xf3\xa9\x03\x2c\x0b\x4d\x8d\xd8\x41\x57\xc3\x84\xa6\xf7\xba\x1a\x46\x34\x4c\x3d\xcd\x17\xfb\x33\x00\x00\xff\xff\xbe\x48\x68\x6a\xdf\x02\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 735, mode: os.FileMode(420), modTime: time.Unix(1522959522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
