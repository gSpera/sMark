// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x8a\xdb\x30\x10\xbe\xe7\x29\x06\xf7\xb0\x10\x6a\x7b\x93\x6c\xa1\x28\x4e\x0a\xbb\xed\xd2\x3d\x15\x9a\xed\x03\xd8\xd6\xd8\x16\x91\x25\x23\x4d\x68\x53\xe1\x77\x2f\xb6\x12\x13\x27\x26\x74\x8e\xf3\xfd\x30\x48\xf3\x4d\x52\x51\x2d\xb7\xb3\x59\x52\x61\xca\xb7\x33\x00\x80\x84\x04\x49\xdc\x3a\x17\xfd\x68\x48\x68\x65\xa3\x1d\x19\xa1\xca\xe8\xbd\xeb\xb7\x6d\x12\x7b\x82\x27\xd7\x48\x29\xe4\x55\x6a\x2c\xd2\x26\xf8\xf5\xfe\x1a\x7e\x0e\xb6\x49\xdc\xb5\x3d\xc3\x39\x10\x05\x0c\x5e\xcf\x5a\xcb\xe8\x9b\x4a\x33\x89\xaf\x5a\x11\xb4\x6d\x22\x85\xda\x43\x65\xb0\xd8\x04\x15\x51\x63\x59\x1c\x17\x5a\x91\x8d\x4a\xad\x4b\x89\x69\x23\x6c\x94\xeb\x3a\xce\xad\xfd\x52\xa4\xb5\x90\xc7\xcd\x4f\x9d\x69\xd2\x01\x18\x94\x9b\xc0\xd2\x51\xa2\xad\x10\x29\xd8\x3a\x07\xa8\x38\xb4\xad\x9f\xae\x87\xfc\x1c\x5d\x35\x51\x2a\x45\xa9\x42\x89\x05\x81\x1b\xda\x5d\x11\xfe\xa1\xb0\x47\x19\x74\xf0\x7a\x40\xdb\xd9\x8d\x3e\x47\x45\x68\xee\x38\x78\xc2\x5d\x0f\x23\xca\xea\xde\x10\x3d\x3e\xed\x60\x10\x72\xcd\x71\xac\xcd\xd2\x7c\x5f\x1a\x7d\x50\x3c\xcc\xb5\xd4\x86\xc1\x87\xaf\x7d\xad\x47\x34\x2e\x6c\x23\xd3\x23\x83\x4c\xea\x7c\x3f\xc6\x9a\x94\x73\xa1\x4a\x06\x8f\xd1\x27\x83\xf5\x24\xe8\xe7\x66\xb0\xb8\x21\xfc\x16\x9c\x2a\x06\x85\xa0\x30\xd7\x8a\x50\x4d\x4f\xef\x5c\x3c\x1f\xe9\xe2\xb8\x5f\x2c\xcb\xae\xba\xdf\x17\x0c\xde\x14\x47\x45\xd0\x13\xae\xe1\xd5\x00\xef\x0e\x19\x4d\x31\x96\x6c\x5a\xf9\xc4\x6e\x25\xf3\xf8\xb4\x33\x5d\x55\x0b\x70\xdd\x0a\x86\x56\xfc\x45\x06\x2b\xff\x1c\x53\x3f\x7c\xa1\x59\x8e\x34\x4b\xaf\xb9\xc0\x57\x23\x7c\xf1\x5f\x9e\x4f\x63\xcd\xd8\x71\x7e\xb5\x3d\x3d\xd3\x07\x84\xc1\x83\x8f\xc8\xc3\x47\xb0\xa9\xb2\xa1\x45\x23\x8a\xf5\x2d\xfd\x3c\xcc\xe3\xf8\xc3\xdb\x8b\xef\x82\xeb\x3b\xf0\xa6\xa4\x50\xf8\xb2\xdb\x75\x31\xf3\x39\x8b\x2f\x82\xe6\xdc\x65\xde\x4f\x9a\x97\x83\x25\x5d\x9f\x34\x67\x6f\x9f\xfc\xeb\x0c\x9f\x4e\xc1\xed\xfd\x19\x3c\xda\x36\x18\x6e\xcb\x29\xed\x49\xec\x0f\xd8\x2c\xc9\x34\x3f\x9e\xd1\xe8\x59\xf3\x63\x8f\xfa\x6e\x47\xeb\xee\xdd\xbf\x00\x00\x00\xff\xff\x58\x62\x17\x25\xf6\x04\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1532278251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

