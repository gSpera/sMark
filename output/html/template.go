// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package htmlout

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5f\x6f\x9b\x30\x10\x7f\xe7\x53\x9c\xd8\x43\xb7\x68\x40\xfe\x55\x9a\x18\xc9\xa4\x56\xab\xda\x3d\x2e\xdd\xf3\x64\xe0\x00\xab\xc6\x66\xf6\x45\x4a\x86\xf8\xee\x13\x98\x92\x40\xd3\x68\x7e\x4a\xfc\xfb\x73\x16\x77\xf7\x8b\x0a\x2a\xc5\xd6\x71\xa2\x02\x59\xba\x75\x00\x00\x22\xe2\x24\x70\x5b\xd7\xfe\x8e\x34\x97\xb9\xff\xdc\xfe\x6f\x9a\x28\xb0\x80\x25\x95\x48\x0c\x92\x82\x69\x83\xb4\x71\x7f\x3d\x3f\x78\x5f\xdc\x6d\x14\xb4\xd7\x96\x51\xd7\xc0\x33\xf0\xef\x94\x12\xfe\x77\xc9\x62\x81\x0f\x4a\x12\x34\x4d\x24\xb8\x7c\x81\x42\x63\xb6\x71\x0b\xa2\xca\x84\x41\x90\x29\x49\xc6\xcf\x95\xca\x05\xb2\x8a\x1b\x3f\x51\x65\x90\x18\xf3\x2d\x63\x25\x17\xc7\xcd\x4f\x15\x2b\x52\x2e\x68\x14\x1b\xd7\xd0\x51\xa0\x29\x10\xc9\xdd\xd6\x35\xa0\x4c\xa1\x69\xec\xab\x3a\xc8\xd6\x6f\x4f\x28\x15\x7d\xf4\x0b\xe1\x25\x85\x56\x25\x83\xd9\x27\xa8\x07\xb0\x3d\x6d\x5d\xcf\xd6\x08\xe1\xc6\x56\xb9\xf9\x0c\x86\x49\xe3\x19\xd4\x3c\xfb\xfa\x96\x6e\xf8\x5f\x0c\x61\xe1\xcf\x6f\x35\x96\x27\xbc\x71\x86\x9f\x95\xcf\x04\xcf\xa5\x27\x30\xa3\x49\x41\xc2\x03\x79\x1d\x1a\x42\x0b\x5f\xd5\x27\x28\x09\xf5\x15\x07\x4b\xb8\xea\xa1\x79\x5e\x5c\x7b\x44\x87\x5f\x74\xa8\xeb\x60\x36\x92\x05\x41\x37\x09\x26\x9c\xdc\x3e\x2e\x42\x78\x92\x29\x4a\x82\x8e\x30\x85\x57\x03\xbc\xdb\xc7\x74\x89\xb1\x0c\x2f\x2b\xd7\xe1\x5b\xc9\x2c\xe8\x9b\xdd\x9e\x62\x01\xf5\x59\x53\x56\x7e\xd7\x93\x4b\xdf\xe8\x4c\xb3\x1c\x69\x96\x56\x73\x86\xaf\x46\xf8\xe2\xbf\x3c\xd7\x63\x8d\x75\x1c\xe0\x58\xa8\xe4\xe5\xcf\x5e\x11\x4e\x3a\x11\x2b\x9d\xa2\xee\x06\x25\x84\x75\x75\x00\xa3\x04\x4f\xe1\xc3\xbc\x3b\xe3\xe1\xab\x58\x9a\x72\x99\xf7\xe4\xc5\xbc\x3a\x8c\xf1\x92\xe9\x9c\xcb\x10\x6e\x2f\x03\x1e\xa9\xea\x7d\x99\x17\x2b\x22\x55\x4e\x09\xa3\x71\x80\xd7\x40\x78\x92\x82\x4b\xbc\xdf\xed\x86\xbd\x0b\xce\x16\xaf\x5f\xfc\x9e\x7b\xbf\x37\xa4\xca\x33\x6e\xc7\xef\x22\x60\xba\xcc\x7d\x26\x9c\x82\x67\xd0\x36\x8d\x3b\x78\xf7\xeb\xfe\x4e\xc6\xfc\x18\xea\x8c\x93\xe1\x64\xfa\xfb\x11\x59\xda\x34\x4e\x14\xd8\xc8\x73\xa2\x58\xa5\xc7\x57\x7b\xff\x4e\xa5\xc7\x0e\xb5\xb7\x2d\xad\x4d\xc8\x7f\x01\x00\x00\xff\xff\x88\xb2\x3d\x2f\x28\x05\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1320, mode: os.FileMode(420), modTime: time.Unix(1533749346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

