// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\x06\x5f\x16\x42\x6d\x35\xc9\x16\x8a\xe3\xb8\xd0\xa5\x4b\xf7\x54\x68\xb6\x0f\xe0\xc4\xe3\x48\x54\x96\x82\x35\x0b\x4d\x85\xde\xbd\x48\x4a\xbc\x76\x12\x42\x75\x32\xf3\xfd\x30\x48\xdf\xe7\x92\x53\x27\xab\x24\x29\x39\xd6\x4d\x95\x00\x00\x94\x24\x48\x62\x65\x6d\xfe\xe3\x40\x42\x2b\x93\xbf\xfa\x81\x73\x25\x8b\x48\x64\x75\x48\x35\xec\x78\xdd\x1b\xa4\x75\xfa\xeb\xf5\x39\xfb\x9c\x56\x25\xf3\xe3\xc8\xb0\x16\x44\x0b\x83\xc9\x37\x55\x6f\x25\x3e\x6b\x45\xe0\x5c\x29\x85\xfa\x0d\xbc\xc7\x76\x9d\x72\xa2\x83\x29\x18\x6b\xb5\x22\x93\xef\xb5\xde\x4b\xac\x0f\xc2\xe4\x3b\xdd\xb1\x9d\x31\x5f\xda\xba\x13\xf2\xb8\xfe\xa9\xb7\x9a\x74\x0a\x3d\xca\x75\x6a\xe8\x28\xd1\x70\x44\x4a\x2b\x6b\x01\x55\x03\xce\xc5\xc5\x02\x14\x57\xf0\xe7\x90\xd7\x52\xec\x55\x26\xb1\x25\xb0\xc3\xd8\x1f\xc2\x3f\x94\x05\xb4\x00\x0f\xaf\x06\xd4\x25\x57\xfa\x1d\x2a\xc2\xfe\x8e\x43\x24\xdc\xf5\xe8\xc5\x9e\xdf\x5b\x22\xe0\x63\x87\xf3\x97\xb5\x6c\x36\x51\x31\x16\x1e\xc5\x14\x17\xd3\xef\xf3\x02\x5e\x54\x83\x8a\x20\x10\x2e\xe1\xe5\x00\x6f\xde\xb6\x74\x8b\xb1\x28\x6e\x2b\x1f\x8b\x6b\xc9\x8c\xb9\xf7\x1d\xf9\x1c\xac\x7f\xc3\xcc\x88\xbf\x58\xc0\x32\xff\xd4\x63\xb7\xba\x75\x45\x23\xcd\x62\xa2\x59\x44\xcd\x08\x5f\x4e\xf0\xf9\x7f\x79\x3e\x4e\x35\x53\xc7\xd9\xc5\xf5\x07\x66\x4c\x58\x01\x0f\x31\x63\x0f\x1f\xc0\xd4\xca\x64\x06\x7b\xd1\xae\xae\xe9\xe7\x65\x3e\x86\x6d\x6e\x3e\xd7\x7b\xee\x5f\x94\x14\x0a\x9f\x36\x1b\x1f\xd0\x98\x50\x36\x8a\xa8\xb5\xe3\x92\x3c\xbd\x19\xd2\xdd\x89\x7c\x76\x8b\x65\xb9\x8c\xfd\xa9\x3d\xa3\x9a\x0e\x62\xe7\xd2\xa1\x82\xa7\x66\x94\x2c\x16\x3c\x29\xb7\xba\x39\x9e\xd1\xfc\xab\x6e\x8e\x01\x8d\x53\x4f\xf3\xff\x83\x7f\x01\x00\x00\xff\xff\x0d\x03\x6a\xac\x16\x04\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1046, mode: os.FileMode(420), modTime: time.Unix(1528025226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

