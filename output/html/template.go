// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package output

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x6e\xdb\x3a\x0c\xbe\xcf\x53\xf0\xf8\x5c\xf4\x9c\x62\x96\x9a\xb4\x03\x36\xc7\xc9\x80\x76\x2b\xda\x61\x40\x81\xa5\x7b\x00\x45\x92\x6d\xa5\xb2\x64\x48\x0c\xd6\xcc\xf0\xbb\x0f\xb6\x12\x37\x4e\x82\xae\xc0\x74\xc9\xef\x87\x84\x44\x52\x69\x81\xa5\x9e\x8f\x46\x69\x21\x99\x98\x8f\x00\x00\x52\x54\xa8\xe5\xbc\xae\xc9\x43\x85\xca\x1a\x4f\x16\xe8\x94\xc9\xc9\x63\x1b\x6f\x9a\x94\x06\x42\x20\x97\x12\x19\xf0\x82\x39\x2f\x71\x16\xfd\x78\xbc\x8d\x3f\x44\xf3\x94\xb6\xe1\xc0\xa8\x6b\x50\x19\xf4\x5e\xd7\xd6\x6a\xf2\xc5\xb0\xa5\x96\xb7\xd6\x20\x34\x4d\xaa\x95\x79\x82\xc2\xc9\x6c\x16\x15\x88\x95\x4f\x28\xcd\xac\x41\x4f\x72\x6b\x73\x2d\x59\xa5\x3c\xe1\xb6\xa4\xdc\xfb\x4f\x19\x2b\x95\xde\xcc\xbe\xdb\xa5\x45\x1b\x81\x93\x7a\x16\x79\xdc\x68\xe9\x0b\x29\x31\x9a\xd7\x35\x48\x23\xa0\x69\x42\x75\x1d\x14\xea\x68\x4f\x45\x98\x56\xb9\x89\xb5\xcc\x10\xea\x3e\xdc\x1e\x94\xcf\x18\x77\x68\x02\x2d\x3c\xed\xd1\x66\x74\xa4\xe7\xd2\xa0\x74\xaf\x38\x04\xc2\xab\x1e\x4e\xe5\xc5\x6b\x45\x74\xf8\x69\x07\x27\x81\x5b\x21\x87\xda\x25\xe3\x4f\xb9\xb3\x6b\x23\x62\x6e\xb5\x75\x09\xfc\xfb\xb9\x3b\xd3\x01\x4d\x28\x5f\x69\xb6\x49\x60\xa9\x2d\x7f\x1a\x62\x15\x13\x42\x99\x3c\x81\x0b\xf2\xde\xc9\xf2\x24\x18\xea\x4e\x60\x7c\x44\xf8\xa9\x04\x16\x09\x64\x0a\x63\x6e\x0d\x4a\x73\xba\xfa\xba\xa6\xe7\x03\x1d\xa5\x5d\x63\xf9\xe4\x20\x7a\x37\x4e\xe0\xde\x08\x69\x10\x3a\xc2\x21\x7c\xd9\xc3\x8b\xf5\x12\x4f\x31\x26\xc9\x69\xe5\x55\x72\x2c\x39\xa7\xdb\x9e\x69\x4f\x31\x86\xba\x6d\xc1\xd8\xab\x5f\x32\x81\xcb\x70\x1d\xa7\x5e\x78\x4f\x33\x19\x68\x26\x41\xb3\x87\x5f\x0e\xf0\xf1\x9b\x3c\xaf\x86\x9a\xa1\xe3\xf9\x41\xf7\x74\xcc\x30\x20\x09\x9c\x85\x11\x39\x7b\x07\x9e\x19\x1f\x7b\xe9\x54\x36\x3d\xa6\xef\x8a\xb9\x18\x3e\x78\xb3\xf7\x5c\x70\xb8\x07\xee\x8d\x56\x46\xde\x2c\x16\xed\x98\x85\x39\xa3\x7b\x83\x76\x30\xf0\x5b\xd1\xcd\xda\xa3\x2d\xb7\xa2\x9d\x79\x18\xfd\xc3\x21\xde\xee\x82\xe3\x05\xd4\x7b\x34\x4d\xd4\xe7\xda\x8e\xfb\x1f\x76\xcd\xd7\x61\xde\x7f\xe2\xf8\xc6\x0a\x09\x77\x2a\x2f\x74\xdb\xd0\x71\x3c\x7f\x5b\x55\xbb\x0d\xc5\x85\x59\x79\xc2\xb5\x5d\x8b\x4c\x33\x27\xbb\x0d\xc5\x56\xec\x99\x6a\xb5\xf4\xb4\xd8\x19\x93\x95\xa7\x1f\xc9\x78\x42\x2e\xc2\x1d\x79\x2a\x64\xc6\xd6\x1a\x49\xa9\x0c\xe1\xde\x47\x7b\x89\x3d\x77\xaa\x42\xf0\x8e\xff\x55\xa2\x97\x58\x9b\x63\xe5\xdb\x85\x1c\xac\x8f\x72\xcd\x0b\xbd\xf2\x44\x19\x85\xfd\x55\x28\x93\x3f\x98\x6f\x96\x89\xff\xfe\x9f\x0e\x75\x2f\xb7\x9d\xd2\xf0\x5f\x8c\xd2\xa5\x15\x9b\x1d\x4a\xae\xad\xd8\x74\x68\x88\xb6\xb4\xf6\x7b\xf9\x1d\x00\x00\xff\xff\xf0\xc0\x8b\x9a\x65\x06\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1637, mode: os.FileMode(420), modTime: time.Unix(1532280595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

