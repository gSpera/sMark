// Code generated by go-bindata.
// sources:
// template.tmpl
// DO NOT EDIT!

package htmlout

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\x9b\x3c\x14\xbe\x86\x5f\x71\xc4\x7b\x51\x29\x2a\xd0\x34\xad\xf4\x8a\x92\x4c\x6a\xb5\xaa\x9d\xb6\x9b\xa5\xbb\x9e\x0c\x1c\xc0\xaa\xb1\x99\xed\x4e\xcd\x90\xff\xfb\x64\x4c\x68\xa0\x69\x34\x5f\x91\xf3\x7c\x1c\xc7\xc7\x7e\xd2\x5a\x37\x6c\xe3\xfb\x69\x8d\xa4\xd8\xf8\x00\x00\xa9\xa6\x9a\xe1\xa6\xeb\xa2\xad\x96\x94\x57\xd1\x93\xfd\x6d\x4c\x1a\x3b\xc0\x91\x1a\xd4\x04\xf2\x9a\x48\x85\x7a\x1d\xfc\x78\xba\x0f\xff\x0f\x36\x69\x6c\xcb\x8e\xd1\x75\x40\x4b\x88\x6e\x85\x60\xd1\x67\x4e\x32\x86\xf7\x82\x6b\x30\x26\x65\x94\x3f\x43\x2d\xb1\x5c\x07\xb5\xd6\xad\x4a\xe2\xb8\x14\x5c\xab\xa8\x12\xa2\x62\x48\x5a\xaa\xa2\x5c\x34\x71\xae\xd4\xa7\x92\x34\x94\xed\xd6\xdf\x45\x26\xb4\x08\x40\x22\x5b\x07\x4a\xef\x18\xaa\x1a\x51\x07\x9b\xae\x03\xe4\x05\x18\xe3\x76\xd5\x43\xae\xbf\x5d\x0b\xe8\xc6\x6f\xbb\x6c\x9b\xd0\x59\x26\x70\xe6\x4c\xcf\xce\x41\x11\xae\x42\x85\x92\x96\x37\xef\xe9\x8a\xfe\xc1\x04\x96\xd1\xc5\xb5\xc4\xe6\x0d\x37\xfe\xf8\xd9\x46\x84\xd1\x8a\x87\x0c\x4b\x3d\x6b\xa8\xf1\x55\x87\x3d\x9a\x80\x85\x4f\xea\x73\xe4\x1a\xe5\x09\x07\x47\x38\xe9\x21\x69\x55\x9f\xda\x44\x8f\x1f\x75\xe8\xba\x78\x31\x91\xc5\x71\x3f\x78\x95\xcc\xaa\x0f\xcb\x04\x1e\x79\x81\x5c\x43\x4f\x98\xc3\xab\x11\xde\xbe\x64\xfa\x18\xe3\x32\x39\xae\xbc\x4a\xde\x4b\x16\xf1\x30\x5b\xbb\xea\x25\x74\x07\x43\x59\x45\xfd\x4c\x8e\x9d\xd1\x81\xe6\x72\xa2\xb9\x74\x9a\x03\x7c\x35\xc1\x97\xff\xe4\x79\x35\xd5\x38\xc7\x11\xce\x98\xc8\x9f\x7f\xbd\x08\x8d\xb3\x49\x64\x42\x16\x28\xfb\x8b\x92\xc0\x55\xfb\x0a\x4a\x30\x5a\xc0\x7f\x17\xfd\x9a\x5e\xbe\x96\x14\x05\xe5\xd5\x40\x5e\x5e\xb4\xaf\x53\xbc\x21\xb2\xa2\x3c\x81\xeb\xe3\x40\xa8\x45\xfb\xb1\x2c\xcc\x84\xd6\xa2\x99\x13\x8c\xef\x79\xad\xc4\xa8\x66\x61\x5e\x4b\xd1\x10\x58\x9c\x43\x41\x7f\x1f\x16\xa0\xf3\x3d\xcf\x9b\xbc\xa4\x46\x70\xa1\x5a\x92\xe3\xcd\x08\x0d\x07\xb3\xb2\xee\x9e\xe7\x31\xca\x31\xac\xd1\x5e\xbe\x04\x96\xd7\xae\x3a\xb9\x7c\x8a\x94\x78\xb7\xdd\xc2\x3e\x74\x1e\xb9\xd5\xd8\xca\xfe\x6d\xc7\x07\x8f\x7b\x08\x97\x81\x7b\xf7\xa2\xb4\x68\x0e\xb8\x3d\xbf\x8f\x99\x79\x60\x0c\xb9\xf3\x16\x6e\xa3\xd6\x98\x60\xf4\x1e\x22\xe5\x83\x1c\xfb\x32\xf6\x99\xa6\x8f\xfb\x13\x0f\x4f\xdf\xbe\x8e\x3b\xfb\xf9\x80\xa4\x30\xc6\x4f\x63\x97\xaf\x7e\x9a\x89\x62\xb7\xef\x13\xdd\x8a\x62\xd7\xa3\xae\x6a\x69\x36\x8e\xff\x06\x00\x00\xff\xff\x6a\x1b\xd1\x2e\x95\x05\x00\x00")

func templateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTmpl,
		"template.tmpl",
	)
}

func templateTmpl() (*asset, error) {
	bytes, err := templateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tmpl", size: 1429, mode: os.FileMode(420), modTime: time.Unix(1533908794, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.tmpl": templateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.tmpl": &bintree{templateTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

